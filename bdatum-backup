#!/usr/bin/env perl

package main;

use utf8;
use strict;
use warnings qw(FATAL utf8);
use open qw(:std :utf8);

use Carp;
use LWP::UserAgent::Determined;
use LWP::ConnCache;
use IO::Socket::SSL;

use URI;
use HTTP::Request::Common qw(GET PUT HEAD POST DELETE);
use HTTP::Request;
use Digest::MD5::File qw(file_md5_hex);
use Digest::MD5 qw(md5_hex);
use File::Next;
use Encode;

use List::Util qw(first);

use Fcntl qw(:flock SEEK_END);
use File::Slurp qw(read_file);
use JSON qw(encode_json decode_json);
use IO::Handle;
use IO::File;
use File::Temp qw/ :seekable /;

use Cwd qw(abs_path);
use Getopt::Long::Descriptive;
use File::MimeInfo::Magic;
use Parallel::ForkManager;
use Try::Tiny;

use DateTime;
use Time::HiRes qw(time);

use Perl6::Junction qw(all);
use List::MoreUtils qw(pairwise);

use File::stat;
use File::Basename;
use File::Copy;
use Config::Any::INI;

use version; our $VERSION = qv('0.10'); # same line, keep backcompat with older MakeMaker

$0 = "[$0 $VERSION]";

use constant {
  LIMIT    => 5 * 1024 * 1024,
  BASE_URL => $ENV{'BDATUM_BASE_URL'} || 'https://api.b-datum.com',

  # file attrs
  MTIME   => 0,
  ETAG    => 1,
  UID     => 2,
  GID     => 3,
  UMASK   => 4,
  SYMLINK => 5
};

my ( $node_key, $partner_key, $path, @blacklist );

my ( $opt, $usage ) = describe_options(
  "$0 - %o <some-arg>",
  [ "node_key|n=s"    => 'node key' ],
  [ "partner_key|p=s" => 'partner key' ],
  [ "path=s"          => 'target path' ],
  [],
  [
    "nodelete|k" => q{don't remove in remote storage files deleted}
  ],
  [ "workers|w"  => 'number of workers (default: 5)', { default => 5 } ],
  [ "config|c=s" => 'config file', ],
  [ "profile=s"  => 'load profile', ],

  [],
  [ "verbose|v" => 'verbose mode', ],
  [ "debug|d"   => 'debug mode' ],
  [ 'help|h', "print usage message and exit" ],
);

print( $usage->text ), exit(0) if $opt->help;

sub _log_debug {
  return unless $opt->debug;
  my $msg = shift;
  print "[debug] $msg\n";
}

sub _log_error {
  my ( $msg, $exit ) = @_;
  print "[error] $msg\n";
  exit $exit if $exit;
}

sub _log_info {
  my $msg = shift;
  print "[info] $msg\n";
}

sub _log_warn {
  my $msg = shift;
  print "[warn] $msg\n";
}

my $manifest = File::Temp->new( UNLINK => 0, )
  or die q{Couldn't create manifest file};

# create base dir
my $b_datum_dir = "$ENV{HOME}/.b-datum";
mkdir($b_datum_dir) unless -d $b_datum_dir;
die "*** ERROR: Can't create directory $b_datum_dir" unless -d $b_datum_dir;

# creating staging dir
my $stage_dir = join( '/', $ENV{HOME}, '.b-datum', 'stage' );
mkdir( $stage_dir, 0777 )
  or die qq{Could not create staging area in "$stage_dir": $!}
  unless -d $stage_dir;

my $configfile = $opt->config || '/etc/bdatum/backup.conf';

if ( -r $configfile ) {
  my $st = stat $configfile;
  my $mode = sprintf( '%04o', $st->mode & 07777 );
  if ( $mode ne '0400' ) {
    &_log_error( "Please run 'chmod 0400 $configfile'", 78 );
  }

  my $config_all = Config::Any::INI->load($configfile);
  my $profile    = $opt->profile;

  my $config = defined $profile
    && exists $config_all->{$profile} ? $config_all->{$profile} : $config_all;

  $node_key    = $config->{node_key};
  $partner_key = $config->{partner_key};
  $path        = $config->{path};
  @blacklist   = map {
    my $r = $config->{blacklist}->{$_};
    eval { qr/$r/ }
      or die qq{Blacklist item "$_" is not a valid regex};
  } keys %{ $config->{blacklist} || {} };
}

$node_key    = $opt->node_key    if $opt->node_key;
$partner_key = $opt->partner_key if $opt->partner_key;
$path        = $opt->path        if $opt->path;

if ( !&_validate_key($node_key)
  or !&_validate_key($partner_key)
  or !&_validate_path($path) )
{
  &_log_error( "Required option missing.", 64 );
}

sub _validate_key {
  my $key = shift || return 0;
  my $val = $key =~ /^[a-zA-Z0-9]{20}$/ ? 1 : 0;
  &_log_error("The key must be [a-zA-Z0-9]{20} -- $key") unless $val;
  return $val;
}

sub _validate_path {
  my $path = shift || return 0;
  my $val = -d $path and -r $path;
  &_log_error("The directory name is invalid -- $path") unless $val;
  return $val;
}

&_log_debug("Node key: $node_key");
&_log_debug("Partner key: $partner_key");
&_log_debug("Path: $path");

my $ssl_cache = IO::Socket::SSL::Session_Cache->new(10);
my $context   = IO::Socket::SSL::SSL_Context->new(
  SSL_verify_mode   => 0,
  SSL_session_cache => $ssl_cache
);
IO::Socket::SSL::set_default_context($context);
IO::Socket::SSL::set_default_session_cache($ssl_cache);

my $ua_cache = LWP::ConnCache->new();
$ua_cache->total_capacity(10);

my $ua = LWP::UserAgent::Determined->new(
  requests_redirectable => [qw(GET HEAD DELETE PUT POST)],
  agent                 => "bdatum-backup/$VERSION (Linux)",
);
$ua->ssl_opts( verify_hostname => 0, SSL_verify_mode => 0, )
  if LWP::UserAgent::Determined->can('ssl_opts');
$ua->timing('1,2,4,8,16,32');
$ua->conn_cache($ua_cache);
$ua->add_handler( request_prepare =>
    sub { shift->authorization_basic( $node_key, $partner_key ); } );

if ( $opt->verbose ) {
  $ua->add_handler( "request_send",  sub { shift->dump; return } );
  $ua->add_handler( "response_done", sub { shift->dump; return } );
}

# ,=> to avoid fat comma stringification
my %metadata_map = (
  UID
  , => 'meta-uid',
  GID
  , => 'meta-gid',
  UMASK
  ,        => 'meta-umask',
  SYMLINK, => 'meta-symlink',
);

sub _warn {
  print "! @_\n";
  return 1;
}

my $files = File::Next::everything(
  {
    error_handler => sub { warn @_; },

    # show symlinks
    follow_symlinks => 1,

    # but ignore its descendants in case of being a link to dir
    file_filter => sub {

      -p $File::Next::name
        && _warn("SKIPPING: $File::Next::name is a named pipe")
        && return;

      -S $File::Next::name
        && _warn("SKIPPING: $File::Next::name is a socket")
        && return;

      -b $File::Next::name
        && _warn("SKIPPING: $File::Next::name is a block special file")
        && return;

      -p $File::Next::name
        && _warn("SKIPPING: $File::Next::name is a named pipe")
        && return;

      -c $File::Next::name
        && _warn("SKIPPING: $File::Next::name is a character special file")
        && return;

      -t $File::Next::name
        && _warn("SKIPPING: $File::Next::name is is opened to a tty")
        && return;

           !-R $File::Next::name
        && !-l $File::Next::name
        && _warn("SKIPPING: $File::Next::name can't be read")
        && return;

      !_in_blacklist($File::Next::name)
        && !-l dirname($File::Next::name)
        && ( ( -d $File::Next::name && -x $File::Next::name )
        || ( -f $File::Next::name )
        || ( -l $File::Next::name ) );
    },
    descend_filter => sub {
      !-l dirname($File::Next::dir);
    },
  },
  $path
);

my $pm = Parallel::ForkManager->new( $opt->workers );

start();

$pm->wait_all_children;

_send_manifest();

close($manifest);
unlink($manifest);

exit(0);

sub start {
  my %cache = _read_cache();

  my $start = DateTime->now( time_zone => 'local' );
FILE: while ( defined( my $file = $files->() ) ) {

    &_log_info("processing: $file");
    if ( -d $file ) {
      opendir( my $dh, $file ) || die "can't opendir $file: $!";
      closedir($dh), _mkdir($file), next
        unless readdir($dh);
    }

    next if !-l $file && -d $file;

    my @previous_attrs = @{ $cache{$file} || [] };

    my $change_specs = get_changes( $file, \@previous_attrs );

    $cache{$file} = $change_specs->{attributes};

    &_log_info("[$$] Sending $file...");

    {
      $pm->start and next;

      my $attempt = 0;
      my $error;
      do {
        try {
          if ( $previous_attrs[ETAG]
            && ( $previous_attrs[ETAG] eq $change_specs->{attributes}->[ETAG] )
            )
          {

            # no content changed but some metadata did
            if ( @{ $change_specs->{modified_fields} || [] } ) {
              send_patch(%$change_specs);
            }
          }
          else {
            send_file( $file, $change_specs->{attributes}, $change_specs );
          }
        }

        catch { $error = $_; sleep(3); };
        if ($error) {
          &_log_warn("Error sending $file trying again... $attempt");
          &_log_warn("\t\t$error");
        }
      } while ( $error && ( $attempt++ < 3 ) );

      unlink( $change_specs->{stage_file} )
        || die qq{Could not unlink tempfile "$change_specs->{stage_file}": $!}
        if exists $change_specs->{stage_file} && -e $change_specs->{stage_file};

      $pm->finish;

    }
  }

  $pm->wait_all_children;

  my $end = DateTime->now( time_zone => 'local' );
  &_log_info("*\n*\n*\n* Started: $start");
  &_log_info("* Completed: $end");

  _write_cache(%cache);

}

sub _in_blacklist {
  my $file = shift;
  my $yes = first { $file =~ $_ } @blacklist;
  _warn("SKIPPING: $file is in blacklist") if $yes;
  return $yes;
}

sub get_changes {
  my ( $file, $attrs ) = @_;

  return unless defined $attrs && ( ref $attrs eq 'ARRAY' );
  my $stat = ( -l $file ? File::stat::lstat($file) : File::stat::stat($file) )
    or return;

  my $sfile =
    -l $file
    ? $file
    : _link_to_stage($file);    # no need to move the symlink itself
  my $etag = -l $file ? md5_hex('') : file_md5_hex($sfile);
  my @modified_fields = ();

  my $new_attrs = [
    $stat->mtime, $etag, $stat->uid, $stat->gid,
    sprintf( '%04o', $stat->mode ),
    ( -l $file ? abs_path( readlink $file ) : '' )
  ];

  my $changes = {
    stage_file      => $sfile,
    file            => $file,
    attributes      => $new_attrs,
    modified_fields => undef,
  };

  return $changes unless scalar @$attrs;    # new file, no changes

  push @modified_fields,
    grep { $attrs->[$_] ne $new_attrs->[$_] }
    ( MTIME, ETAG, UID, GID, UMASK, SYMLINK );

  {
    no warnings qw(once);

    # nothing changed
    return $changes if all( pairwise { $a eq $b } @$attrs, @$new_attrs ) == 1;
  }

  # symlinks read with readlink get its MTIME changed, we can ignore if
  # the file it's a link
  return $changes
    if -l $file && scalar @$attrs == 1 && defined $attrs->[MTIME];

  $changes->{modified_fields} = [@modified_fields];

  return $changes;

}

sub send_patch {
  my (%change_specs) = @_;

  my $uri = URI->new(BASE_URL);
  $uri->path('storage');

  $uri->query_form(
    path => $change_specs{file},
    map { $metadata_map{$_} => $change_specs{attributes}->[$_] }
      @{ $change_specs{modified_fields} || [] }
  );

  my $req = HTTP::Request->new( 'PATCH', $uri );
  $req->header( ETag => $change_specs{attributes}->[ETAG] );

  _send_request($req);

}

sub send_file {
  my ( $file, $attr ) = @_;

  return _send_default(@_) if -l $file;

  if ( -s $file < LIMIT ) {
    return _send_default(@_);
  }
  else {
    return _send_multipart(@_);
  }

  &_log_info("DONE");

}

sub _send_manifest {
  my $uri = URI->new(BASE_URL);
  $uri->path('storage/manifest');

  my $etag = file_md5_hex( $manifest->filename );

  my $req = PUT $uri,
    Etag    => $etag,
    Content => scalar read_file( $manifest->filename );
  my $res = _send_request($req);
}

sub _send_multipart {
  my ( $file, $attrs, $changes ) = @_;

  my $etag = $attrs->[ETAG];
  &_log_info("!!! $file > 5MB");
  STDOUT->printflush("\t* init multipart upload...");

  my $uri = URI->new(BASE_URL);
  $uri->path('storage');

  return 1
    if _check_duplicate( $uri, $file, $etag, $node_key, $partner_key, $attrs );

  # init

  my $full_etag = $etag;
  my $sfile     = $changes->{stage_file};

  $uri->query_form( path => "$file", multipart => 1 );
  my $req       = POST $uri, Etag => $full_etag;
  my $res       = _send_request($req);
  my $object    = decode_json( $res->content );
  my $upload_id = $object->{upload_id};
  &_log_info("done!");

  # parts
  my $buffer;

  my $fh = IO::File->new( $sfile, 'r', ':unix' )
    or die "Cannot open $file";

  my $i = 1;
  my @parts;

  while ( read( $fh, $buffer, LIMIT ) ) {
    STDOUT->printflush("\t* sending part $i...");

    my $uri = URI->new(BASE_URL);
    $uri->path('storage');

    my $etag = md5_hex($buffer);

    push @parts, [ $i, $etag ];

    $uri->query_form(
      path      => "$file",
      upload_id => $upload_id,
      part      => $i++
    );

    my $req = PUT $uri,
      Etag    => $etag,
      Content => $buffer;

    my $res = _send_request($req);

    print "done!\n";
  }
  $fh->close;

  #finalize
  STDOUT->printflush("\t* finalizing...");
  $uri = URI->new(BASE_URL);
  $uri->path('/storage');
  $uri->query_form( path => "$file", upload_id => $upload_id );

  $req = POST $uri,
    Content_type => 'application/json',
    Accept       => 'application/json',
    Etag         => $full_etag,
    Content      => encode_json(
    {
      parts        => \@parts,
      content_type => mimetype($sfile) || 'application/octet-stream',
      _get_metadata( $file, $attrs )
    }
    );
  _send_request($req);
  print "done!\n";

  _write_to_manifest( $manifest, "+$file\n+${\(-s $sfile)}\n+$full_etag\n\n" );

  return 1;

}

sub _write_to_manifest {
  my ( $manifest_file, $line ) = @_;
  lock($manifest_file);
  print $manifest_file $line;
  unlock($manifest_file);
}

sub _get_metadata {
  my ( $file, $attrs ) = @_;
  map { $metadata_map{$_} => $attrs->[$_] }
    grep { defined $attrs->[$_] && length $attrs->[$_] }
    map { int($_) } keys %metadata_map;
}

sub _mkdir {
  my ( $file, $attrs ) = @_;
  my $uri = URI->new(BASE_URL);

  $file = "$file/";
  print "\t $file is an empty dir\n";

  $uri->path('/storage');

  my $etag = $attrs->[ETAG];

  return 1
    if _check_duplicate( $uri, $file, $etag, $node_key, $partner_key, $attrs );

  my $req = POST $uri,
    Content_Type => 'form-data',
    Content      => [ _get_metadata( $file, $attrs ), path => $file, ];
  _send_request($req);
  return 1;

}

sub _delete {
  my ($file) = @_;
  my $uri = URI->new(BASE_URL);
  $uri->path('storage');
  $uri->query_form( path => $file );
  my $req = DELETE $uri;
  STDOUT->printflush("* deleting $file ... \n");
  my $res = $ua->request($req);

  _write_to_manifest( $manifest, "-$file\n\n" );

  return $res->is_success;
}

sub _send_default {
  my ( $file, $attrs, $changes ) = @_;
  my $uri = URI->new(BASE_URL);
  $uri->path('/storage');

  my $etag = -l $file ? md5_hex('') : $attrs->[ETAG];

  return 1
    if _check_duplicate( $uri, $file, $etag, $node_key, $partner_key, $attrs );

  my $sfile = $changes->{stage_file};

  my $req = POST $uri,
    Content_Type => 'form-data',
    Etag         => $etag,
    Content      => [
    _get_metadata( $file, $attrs ),
    path => "$file",
    ( !-l $file ? ( value => [$sfile] ) : () )
    ];
  _send_request($req);

  my $stat = -l $file ? File::stat::lstat($file) : File::stat::lstat($file);
  _write_to_manifest( $manifest, "+$file\n+${\(-s $stat)}\n+$etag\n\n" );

  return 1;

}

sub _check_duplicate {
  my ( $uri, $file, $etag, $node_key, $partner_key, $attrs ) = @_;
  my $req = POST $uri,
    Content_Type => 'form-data',
    Etag         => $etag,
    Content      => [
    etag  => $etag,
    check => 1,
    path  => "$file",
    _get_metadata( $file, $attrs )
    ];
  my $res = $ua->request($req);
  if ( $res->code == 201 ) {
    my $stat = -l $file ? File::stat::lstat($file) : File::stat::lstat($file);
    _write_to_manifest( $manifest, "+$file\n+${\(-s $stat)}\n+$etag\n\n" );
  }
  return $res->is_success;
}

sub _send_request {

  my $req = shift;
  my $res = $ua->request($req);
  if ( !$res->is_success ) {
    confess $res->as_string;
    if ( $res->code == 401 ) {
      print "*** ERROR: 401 http unauthorized\n";
      exit 77;    # EX_NOPERM
    }
  }
  return $res;

}

sub _delete_files {
  my (@to_delete) = @_;
  foreach my $delete_this (@to_delete) {
    $pm->start and next;
    _delete($delete_this);
    $pm->finish;
  }
  $pm->wait_all_children;
}

sub _make_cache_filename {
  my $base = md5_hex( $node_key . $partner_key . $path );
  return "$b_datum_dir/$base.cache";
}

sub _read_cache {
  #
  # Slurp cache File
  #

  my $cache_file = &_make_cache_filename();
  my %cache;
  my $cache_file_version = &_filename_cache_version($cache_file);

  my $cache_version = &_read_cache_version($cache_file_version);
  if ( version->parse($cache_version) != version->parse($VERSION) ) {
    print "* Remove $cache_file_version\n";
    print "* Remove $cache_file\n";
    unlink($cache_file_version);
    unlink($cache_file);
  }

  return () unless -e $cache_file;

  open( my $fh, '<:unix:encoding(UTF-8)', $cache_file )
    or die "Cannot open $cache_file";

  my $t = time;
  my @to_delete;
  while ( my $line = $fh->getline ) {
    my $attrs = [ split /,/, $line ];
    my $file  = shift @$attrs;
    my $stat  = -l $file ? File::stat::lstat($file) : File::stat::lstat($file);
    if ( !$stat ) {
      if ( !$opt->nodelete ) {
        push( @to_delete, $file );
      }
      next;
    }

    $cache{$file} = $attrs;
  }
  print '* Cache read took: ' . sprintf( "%.9f", ( time - $t ) ) . "s\n";

  close($fh);
  undef($fh);

  if ( !$opt->nodelete && @to_delete ) {
    _delete_files(@to_delete);
  }

  return %cache;
}

sub _filename_cache_version {
  join( '.', shift, 'version' );
}

sub _update_cache_version {
  my $filename = shift;
  my $fh = IO::File->new( $filename, 'w', ':unix' )
    or die "Cannot open $filename";
  print $fh $VERSION;
}

sub _read_cache_version {
  my $filename = shift;
  return qv(0) unless -r $filename;
  my $content = do { local ( @ARGV, $/ ) = $filename; <> };
  return $content if qv($content)->is_qv;
  return qv(0);
}

sub _write_cache {
  my (%cache)            = @_;
  my $t                  = time;
  my $cache_file         = &_make_cache_filename();
  my $cache_file_version = &_filename_cache_version($cache_file);
  &_update_cache_version($cache_file_version);

  open( my $fh, '>:unix', $cache_file )
    or die "Cannot open $cache_file";

  print {$fh}
    map {
    my $attrs = $cache{$_};
    Encode::encode_utf8( join( q{,}, $_, @$attrs ) . "\n" );
    }
    keys %cache;

  #  $cache_file->close;
  print '* Cache write took: '
    . sprintf( "%.9f", ( time - $t ) )
    . "s\n ==> Done!\n";
}

sub lock {
  my ($fh) = @_;
  flock( $fh, LOCK_EX ) or die "Cannot lock file - $!\n";
  seek( $fh, 0, SEEK_END ) or die "Cannot seek - $!\n";
}

sub unlock {
  my ($fh) = @_;
  flock( $fh, LOCK_UN ) or die "Cannot unlock file - $!\n";
}

sub _stage_file {
  join( '/', $stage_dir, md5_hex( $node_key . $partner_key . $path . shift ) );
}

sub _link_to_stage {
  my $file       = shift;
  my $stage_file = _stage_file($file);
  copy( $file, $stage_file ) or die "Copy failed: $!";
  return $stage_file;
}


#!/usr/bin/env perl

use utf8;
use strictures 1;
use warnings;
use Carp;
use warnings qw(FATAL utf8);
use open qw(:std :utf8);

use LWP::UserAgent::Determined;
use LWP::ConnCache;
use IO::Socket::SSL;
use Data::Printer;
use URI;
use HTTP::Request::Common qw(GET PUT HEAD POST DELETE);
use HTTP::Request;
use Digest::MD5::File qw(file_md5_hex);
use Digest::MD5 qw(md5_hex);
use File::Next;
use Path::Class qw(file);
use JSON qw(encode_json decode_json);
use IO::Handle;
use Getopt::Long::Descriptive;
use File::MimeInfo::Magic;
use Parallel::ForkManager;
use Try::Tiny;
use Path::Tiny 0.020;
use DateTime;
use Time::HiRes qw(time);

use Perl6::Junction qw(all);
use List::MoreUtils qw(pairwise);

use constant {
  LIMIT => 5 * 1024 * 1024,

  BASE_URL => 'https://api.b-datum.com',

  #  BASE_URL => 'http://localhost:5000/',

  # file attrs
  MTIME   => 0,
  ETAG    => 1,
  UID     => 2,
  GID     => 3,
  UMASK   => 4,
  SYMLINK => 5
};

my ( $node_key, $partner_key, $path );
my ( $opt, $usage ) = describe_options(
  "$0 %o <some-arg>",
  [ "node_key|n=s"    => 'chave do ponto',    { required => 1 } ],
  [ "partner_key|p=s" => 'chave do parceiro', { required => 1 } ],
  [ "dir|d=s"         => 'pasta alvo',        { required => 1 } ],
  [ "nodelete|k" => 'não remover do storage arquivos deletados', ],
  [ "workers|w"  => 'número de processos', { default => 5 } ],
  [ "verbose|v"  => 'modo verboso', ],
  [],
  [ 'help|h', "print usage message and exit" ],
);

print( $usage->text ), exit if $opt->help;

( $node_key, $partner_key, $path ) =
  ( $opt->node_key, $opt->partner_key, $opt->dir );

my $ssl_cache = IO::Socket::SSL::Session_Cache->new(10);
my $context   = IO::Socket::SSL::SSL_Context->new(
  SSL_verify_mode   => 0,
  SSL_session_cache => $ssl_cache
);
IO::Socket::SSL::set_default_context($context);
IO::Socket::SSL::set_default_session_cache($ssl_cache);

my $ua_cache = LWP::ConnCache->new();
$ua_cache->total_capacity(10);

my $ua =
  LWP::UserAgent::Determined->new(
  requests_redirectable => [qw(GET HEAD DELETE PUT POST)], );
$ua->timing('1,2,4,8,16,32');
$ua->conn_cache($ua_cache);
$ua->ssl_opts( verify_hostname => 0, SSL_verify_mode => 0, );

$ua->add_handler( request_prepare =>
    sub { shift->authorization_basic( $node_key, $partner_key ); } );

if ( $opt->verbose ) {
  $ua->add_handler( "request_send",  sub { shift->dump; return } );
  $ua->add_handler( "response_done", sub { shift->dump; return } );
}

# ,=> to avoid fat comma stringification

my %metadata_map = (
  UID
  , => 'meta-uid',
  GID
  , => 'meta-gid',
  UMASK
  ,        => 'meta-umask',
  SYMLINK, => 'meta-symlink',
);

my $files = File::Next::everything(
  {
    # show symlinks
    follow_symlinks => 1,

    # but ignore its descendants in case of being a link to dir
    file_filter => sub { !-l path($File::Next::name)->parent }
  },
  $path
);

my $pm = Parallel::ForkManager->new( $opt->workers );

start();
warn 'end';
$pm->wait_all_children;
exit(0);

sub start {
  my %cache = _read_cache();
  my $start = DateTime->now( time_zone => 'local' );
  while ( defined( my $file = $files->() ) ) {

    print "processing: $file\n";
    if ( -d $file && !( scalar path($file)->children ) ) {
      print "\t $file is an empty dir\n";
      _mkdir($file);
      next;
    }

    next if !-l $file && -d $file;

    my @previous_attrs = @{ $cache{$file} || [] };

    my $change_specs = get_changes( $file, \@previous_attrs )
      or next;

    $cache{$file} = $change_specs->{attributes};

    print "  [$$] Sending $file...\n";

    {
      $pm->start and next;

      my $attempt = 0;
      my $error;
      do {
        try {
          if ( $previous_attrs[ETAG]
            && ( $previous_attrs[ETAG] eq $change_specs->{attributes}->[ETAG] )
            )
          {
            send_patch(%$change_specs);
          }
          else {
            send_file( $file,
              $change_specs ? $change_specs->{attributes} : \@previous_attrs );
          }
        }

        catch { $error = $_; sleep(3); };
        if ($error) {
          warn "!! Error sending $file trying again... $attempt";
          warn "\t\t$error";
        }
      } while ( $error && ( $attempt++ < 3 ) );
      $pm->finish;
    }
  }

  $pm->wait_all_children;

  my $end = DateTime->now( time_zone => 'local' );
  print "*\n*\n*\n* Started: $start\n";
  print "* Completed: $end\n";

  _write_cache(%cache);

}

sub get_changes {
  my ( $file, $attrs ) = @_;
  return unless defined $attrs && ( ref $attrs eq 'ARRAY' );

  my $file_obj        = path($file);
  my $stat            = $file_obj->stat;
  my $etag            = -l $file ? md5_hex('') : file_md5_hex($file);
  my @modified_fields = ();

  my $new_attrs = [
    $stat->mtime, $etag, $stat->uid, $stat->gid,
    sprintf( '%04o', $stat->mode ),
    ( -l $file ? readlink $file : '' )
  ];

  my $changes = {
    file            => $file,
    attributes      => $new_attrs,
    modified_fields => \@modified_fields
  };

  return $changes unless scalar @$attrs;    # new file, no changes

  push @modified_fields,
    grep { $attrs->[$_] ne $new_attrs->[$_] }
    ( MTIME, ETAG, UID, GID, UMASK, SYMLINK );

  {
    no warnings qw(once);

    # nothing changed
    return if all( pairwise { $a eq $b } @$attrs, @$new_attrs ) == 1;
  }

  return $changes;

}

sub send_patch {
  my (%change_specs) = @_;

  my $uri = URI->new(BASE_URL);
  $uri->path('storage');

  $uri->query_form(
    path => $change_specs{file},
    map { $metadata_map{$_} => $change_specs{attributes}->[$_] }
      @{ $change_specs{modified_fields} || [] }
  );

  my $req = HTTP::Request->new( 'PATCH', $uri );
  $req->header( ETag => $change_specs{attributes}->[ETAG] );

  _send_request($req);

}

sub send_file {
  my ( $file, $attr ) = @_;

  return _send_default(@_) if -l $file;

  if ( -s $file < LIMIT ) {
    return _send_default(@_);
  }
  else {
    return _send_multipart(@_);
  }

  print "DONE\n";

}

sub _send_multipart {
  my ( $file, $attrs ) = @_;

  my $etag = $attrs->[ETAG];
  print "!!! $file > 5MB\n";
  STDOUT->printflush("\t* init multipart upload...");

  my $uri = URI->new(BASE_URL);
  $uri->path('storage');

  return 1
    if _check_duplicate( $uri, $file, $etag, $node_key, $partner_key, $attrs );

  # init

  my $full_etag = $etag;

  $uri->query_form( path => "$file", multipart => 1 );
  my $req       = POST $uri, Etag => $full_etag;
  my $res       = _send_request($req);
  my $object    = decode_json( $res->content );
  my $upload_id = $object->{upload_id};
  print "done!\n";

  # parts
  my $buffer;
  my $fh = file($file)->openr;
  my $i  = 1;
  my @parts;

  while ( read( $fh, $buffer, LIMIT ) ) {
    STDOUT->printflush("\t* sending part $i...");

    my $uri = URI->new(BASE_URL);
    $uri->path('storage');

    my $etag = md5_hex($buffer);

    push @parts, [ $i, $etag ];

    $uri->query_form(
      path      => "$file",
      upload_id => $upload_id,
      part      => $i++
    );

    my $req = PUT $uri,
      Etag    => $etag,
      Content => $buffer;

    my $res = _send_request($req);

    print "done!\n";
  }
  $fh->close;

  #finalize
  STDOUT->printflush("\t* finalizing...");
  $uri = URI->new(BASE_URL);
  $uri->path('/storage');
  $uri->query_form( path => "$file", upload_id => $upload_id );

  $req = POST $uri,
    Content_type => 'application/json',
    Accept       => 'application/json',
    Etag         => $full_etag,
    Content      => encode_json(
    {
      parts        => \@parts,
      content_type => mimetype($file) || 'application/octet-stream',
      _get_metadata( $file, $attrs )
    }
    );
  _send_request($req);
  print "done!\n";
  return 1;

}

sub _get_metadata {
  my ( $file, $attrs ) = @_;
  map { $metadata_map{$_} => $attrs->[$_] }
    grep { defined $attrs->[$_] && length $attrs->[$_] }
    map { int($_) } keys %metadata_map;
}

sub _mkdir {
  my ( $file, $attrs ) = @_;
  my $uri = URI->new(BASE_URL);
  $uri->path('/storage');

  my $etag = $attrs->[ETAG];

  return 1
    if _check_duplicate( $uri, $file, $etag, $node_key, $partner_key, $attrs );

  my $req = POST $uri,
    Content_Type => 'form-data',
    Content      => [ _get_metadata( $file, $attrs ), path => "$file/", ];
  _send_request($req);
  return 1;

}

sub _delete {
  my ($file) = @_;
  my $uri = URI->new(BASE_URL);
  $uri->path('storage');
  $uri->query_form( path => $file );
  my $req = DELETE $uri;
  STDOUT->printflush("* deleting $file ... \n");
  my $res = $ua->request($req);
  return $res->is_success;
}

sub _send_default {
  my ( $file, $attrs ) = @_;
  my $uri = URI->new(BASE_URL);
  $uri->path('/storage');

  my $etag = $attrs->[ETAG];

  return 1
    if _check_duplicate( $uri, $file, $etag, $node_key, $partner_key, $attrs );

  my $req = POST $uri,
    Content_Type => 'form-data',
    Etag         => $etag,
    Content      => [
    _get_metadata( $file, $attrs ),
    path => "$file",
    ( !-l $file ? ( value => [$file] ) : () )
    ];
  _send_request($req);
  return 1;

}

sub _check_duplicate {
  my ( $uri, $file, $etag, $node_key, $partner_key, $attrs ) = @_;
  my $req = POST $uri,
    Content_Type => 'form-data',
    Etag         => $etag,
    Content      => [
    etag  => $etag,
    check => 1,
    path  => "$file",
    _get_metadata( $file, $attrs )
    ];
  my $res = $ua->request($req);
  return $res->is_success;
}

sub _send_request {

  my $req = shift;
  my $res = $ua->request($req);
  if ( !$res->is_success ) {
    confess $res->as_string;
  }
  return $res;

}

sub _delete_files {
  my (@to_delete) = @_;
  foreach my $delete_this (@to_delete) {
    $pm->start and next;
    _delete($delete_this);
    $pm->finish;
  }
  $pm->wait_all_children;
}

sub _read_cache {
  #
  # Slurp cache File
  #

  my $b_datum_dir = "$ENV{HOME}/.b-datum";
  mkdir($b_datum_dir) unless -e $b_datum_dir;

  my $cache_file =
    path( "$b_datum_dir/" . md5_hex( $node_key . $partner_key ) . '.cache' )
    ->touch;
  my %cache;

  my $fh = $cache_file->openr_utf8;
  my $t  = time;
  my @to_delete;
  while (<$fh>) {
    my ( $file, $mtime, $etag ) = split /,/, $_;
    push( @to_delete, $file ), next
      if !$opt->nodelete && !-e $file;
    $cache{$file} = [ $mtime, $etag ];
  }
  print '* Cache read took: ' . sprintf( "%.9f", ( time - $t ) ) . "s\n";

  close($fh);

  if ( !$opt->nodelete && @to_delete ) {
    _delete_files(@to_delete);
  }

  return %cache;
}

sub _write_cache {
  my (%cache)     = @_;
  my $t           = time;
  my $b_datum_dir = "$ENV{HOME}/.b-datum";
  my $cache_file =
    path( "$b_datum_dir/" . md5_hex( $node_key . $partner_key ) . '.cache' )
    ->touch;

  $cache_file->spew_utf8(
    map { my $attrs = $cache{$_}; join( q{,}, $_, @$attrs, "\n" ) }
      keys %cache
  );
#  $cache_file->close;
  print '* Cache write took: '
    . sprintf( "%.9f", ( time - $t ) )
    . "s\n ==> Done!\n";
}

